<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WildGoatPackage.NET</name>
    </assembly>
    <members>
        <member name="T:WGP.Angle">
            <summary>
            Angle class. Used for angle conversions.
            </summary>
        </member>
        <member name="P:WGP.Angle.Zero">
            <summary>
            Angle corresponing to 0 degrees or 0 radians.
            </summary>
        </member>
        <member name="P:WGP.Angle.Loop">
            <summary>
            Angle corresponing to 360 degrees or 2PI radians.
            </summary>
        </member>
        <member name="P:WGP.Angle.Degree">
            <summary>
            Angle in degrees.
            </summary>
        </member>
        <member name="P:WGP.Angle.Radian">
            <summary>
            Angle in radians.
            </summary>
        </member>
        <member name="M:WGP.Angle.#ctor(WGP.Angle)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Angle.RotateVector(SFML.System.Vector2f)">
            <summary>
            Returns the rotated vector corresponding to the angle.
            </summary>
            <param name="vector">Vector to rotate.</param>
        </member>
        <member name="M:WGP.Angle.RotateVector(System.Single,System.Single)">
            <summary>
            Returns the rotated vector corresponding to the angle.
            </summary>
            <param name="x">X component of the vector.</param>
            <param name="y">Y component of the vector.</param>
        </member>
        <member name="M:WGP.Angle.GenerateVector(System.Single)">
            <summary>
            Generates a vector based on the angle.
            </summary>
            <param name="length">The length of the vector. (Optional)</param>
            <returns>Generated vector.</returns>
        </member>
        <member name="M:WGP.Angle.FromDegrees(System.Single)">
            <summary>
            Creates a new instance from a value in degrees.
            </summary>
            <param name="degree">Value in degrees.</param>
            <returns>New Angle instance.</returns>
        </member>
        <member name="M:WGP.Angle.FromRadians(System.Single)">
            <summary>
            Creates a new instance from a value in radians.
            </summary>
            <param name="radian">Value in radians.</param>
            <returns>New Angle instance.</returns>
        </member>
        <member name="M:WGP.Angle.Cos">
            <summary>
            Returns the cosine of the angle.
            </summary>
            <returns>Cosine.</returns>
        </member>
        <member name="M:WGP.Angle.Sin">
            <summary>
            Returns the sinus of the angle.
            </summary>
            <returns>Sinus.</returns>
        </member>
        <member name="M:WGP.Angle.Tan">
            <summary>
            Returns the tangent of the angle.
            </summary>
            <returns>Tangent.</returns>
        </member>
        <member name="M:WGP.Angle.Cosh">
            <summary>
            Returns the hyperbolic cosine of the angle.
            </summary>
            <returns>Hyperbolic cosine.</returns>
        </member>
        <member name="M:WGP.Angle.Sinh">
            <summary>
            Returns the hyperbolic sinus of the angle.
            </summary>
            <returns>Hyperbolic sinus.</returns>
        </member>
        <member name="M:WGP.Angle.Tanh">
            <summary>
            Returns the hyperbolic tangent of the angle.
            </summary>
            <returns>Hyperbolic tangent.</returns>
        </member>
        <member name="T:WGP.Chronometer">
            <summary>
            Chronometer with multiple functions.
            </summary>
        </member>
        <member name="M:WGP.Chronometer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Chronometer.#ctor(WGP.Chronometer)">
            <summary>
            Constructor. Used to set relative to another Chronometer.
            </summary>
            <param name="timer">Relative to.</param>
        </member>
        <member name="P:WGP.Chronometer.Speed">
            <summary>
            Change the speed. The speed is the factor by which is multiplied the elapsed time.
            </summary>
        </member>
        <member name="P:WGP.Chronometer.ElapsedTime">
            <summary>
            The current elapsed time.
            </summary>
        </member>
        <member name="M:WGP.Chronometer.Restart">
            <summary>
            Restarts the chronometer.
            </summary>
        </member>
        <member name="T:WGP.FileCompiler">
            <summary>
            Compiles files into one.
            </summary>
        </member>
        <member name="F:WGP.FileCompiler.Files">
            <summary>
            List of the files to compile.
            </summary>
        </member>
        <member name="M:WGP.FileCompiler.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.FileCompiler.Compile(System.String)">
            <summary>
            Compiles the files.
            </summary>
            <param name="path">Path of the output.</param>
        </member>
        <member name="T:WGP.FileExtracter">
            <summary>
            Extract files made with the FileCompiler.
            </summary>
        </member>
        <member name="P:WGP.FileExtracter.Files">
            <summary>
            List of the streams to the files extracted.
            </summary>
        </member>
        <member name="M:WGP.FileExtracter.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.FileExtracter.Load(System.String)">
            <summary>
            Loads a file and extracts its compiled files.
            </summary>
            <param name="path">Path to the compiled file.</param>
        </member>
        <member name="T:WGP.HSVColor">
            <summary>
            Color using the HSV format.
            </summary>
        </member>
        <member name="P:WGP.HSVColor.H">
            <summary>
            Hue of the color.
            </summary>
            <value>Must be between [0,360[</value>
        </member>
        <member name="P:WGP.HSVColor.S">
            <summary>
            Saturation of the color.
            </summary>
            <value>Must be between [0,1]</value>
        </member>
        <member name="P:WGP.HSVColor.V">
            <summary>
            Value of the color.
            </summary>
            <value>Must be between [0,1]</value>
        </member>
        <member name="P:WGP.HSVColor.A">
            <summary>
            Alpha channel of the color.
            </summary>
        </member>
        <member name="M:WGP.HSVColor.#ctor(WGP.HSVColor)">
            <summary>
            Copy Constructor.
            </summary>
            <param name="copy">Color to copy.</param>
        </member>
        <member name="M:WGP.HSVColor.#ctor(System.Single,System.Single,System.Single,System.Byte)">
            <summary>
            Constructor.
            </summary>
            <param name="h">Hue.</param>
            <param name="s">Saturation.</param>
            <param name="v">Value.</param>
            <param name="a">Alpha.</param>
        </member>
        <member name="M:WGP.HSVColor.#ctor(SFML.Graphics.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="color">SFML color.</param>
        </member>
        <member name="M:WGP.HSVColor.ToRgb">
            <summary>
            Convert the color to the RGB format.
            </summary>
            <returns>RGB color0</returns>
        </member>
        <member name="T:WGP.IFunction">
            <summary>
            Interface for functions.
            </summary>
        </member>
        <member name="M:WGP.IFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.Line">
            <summary>
            Line class. Used in arithmetics.
            </summary>
        </member>
        <member name="P:WGP.Line.Position">
            <summary>
            A point of the line.
            </summary>
        </member>
        <member name="P:WGP.Line.Direction">
            <summary>
            The direction of the line. Always normalized.
            </summary>
        </member>
        <member name="M:WGP.Line.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Line.#ctor(WGP.Line)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">Line to copy.</param>
        </member>
        <member name="M:WGP.Line.#ctor(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Constructor.
            </summary>
            <param name="pt1">First point of the line.</param>
            <param name="pt2">A point of the line different than <paramref name="pt1"/>.</param>
        </member>
        <member name="M:WGP.Line.GetPoint(System.Single)">
            <summary>
            Returns a point of the line.
            </summary>
            <param name="t">The scalar parameter.</param>
            <returns>Point equal to : "Position + t * Direction".</returns>
        </member>
        <member name="T:WGP.LinearFunction">
            <summary>
            A basic linear function.
            </summary>
        </member>
        <member name="M:WGP.LinearFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.PowFunction">
            <summary>
            A basic pow function.
            </summary>
        </member>
        <member name="P:WGP.PowFunction.Exponent">
            <summary>
            The exponent of the pow function.
            </summary>
            <value>Exponent.</value>
        </member>
        <member name="M:WGP.PowFunction.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="expo">Exponent. (Optional)</param>
        </member>
        <member name="M:WGP.PowFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.ProgressiveFunction">
            <summary>
            The progressvie function is a combination of 2 pow function (first normal, the second inverted) to looks smooth.
            </summary>
        </member>
        <member name="P:WGP.ProgressiveFunction.Roughness">
            <summary>
            The roughness is the exponent of the pow functions.
            </summary>
            <value>Exponent of the pow function.</value>
        </member>
        <member name="M:WGP.ProgressiveFunction.#ctor(System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="roughness">Roughness of the function. (Optional)</param>
        </member>
        <member name="M:WGP.ProgressiveFunction.Image(System.Single)">
            <summary>
            Returns the image of the function.
            </summary>
            <param name="antecedent">Antecedent. Must be between [0,1].</param>
            <returns></returns>
        </member>
        <member name="T:WGP.Segment">
            <summary>
            The segment is a line that is limited in length.
            </summary>
        </member>
        <member name="P:WGP.Segment.Length">
            <summary>
            Length of the segment.
            </summary>
        </member>
        <member name="M:WGP.Segment.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WGP.Segment.#ctor(WGP.Segment)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">Segment to copy.</param>
        </member>
        <member name="M:WGP.Segment.#ctor(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Constructor.
            </summary>
            <param name="pt1">First point of the segment.</param>
            <param name="pt2">Last point of the segment.</param>
        </member>
        <member name="M:WGP.Utilities.Percent``1(``0,``0,``0)">
            <summary>
            Returns a percentage.
            </summary>
            <param name="value">Reference value.</param>
            <param name="min">Minmal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Percentage.</returns>
        </member>
        <member name="M:WGP.Utilities.Interpolation``1(System.Single,``0,``0)">
            <summary>
            Returns an interpolation.
            </summary>
            <param name="percent">Percent. Must be between [0,1].</param>
            <param name="min">Minimal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Interpolation.</returns>
        </member>
        <member name="M:WGP.Utilities.SystemBitmapAsSFML(System.Drawing.Bitmap)">
            <summary>
            Returns an SFML image from a system bitmap image.
            </summary>
            <param name="img">Bitmap image.</param>
            <returns>SFML image.</returns>
        </member>
        <member name="M:WGP.Utilities.Crypt(System.String,System.String)">
            <summary>
            Crypt a string.
            </summary>
            <param name="str">String to crypt.</param>
            <param name="key">Key to crypt. (Optional)</param>
            <returns>Crypted string.</returns>
        </member>
        <member name="M:WGP.Utilities.Uncrypt(System.String,System.String)">
            <summary>
            Uncrypt a string.
            </summary>
            <param name="str">String to uncrypt.</param>
            <param name="key">Key to uncrypt. (Optional)</param>
            <returns>Uncrypted string.</returns>
        </member>
        <member name="M:WGP.Utilities.GCD(System.Single,System.Single)">
            <summary>
            Returns the GCD of two numbers.
            </summary>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
            <returns>GCD of the two numbers.</returns>
        </member>
        <member name="M:WGP.Utilities.Min``1(``0[])">
            <summary>
            Returns the smallest value.
            </summary>
            <typeparam name="T">Type of the variables. Must be comparable.</typeparam>
            <param name="param">values.</param>
            <returns>Minimum value.</returns>
        </member>
        <member name="M:WGP.Utilities.Max``1(``0[])">
            <summary>
            Returns the biggest value.
            </summary>
            <typeparam name="T">Type of the variables. Must be comparable.</typeparam>
            <param name="param">values.</param>
            <returns>Maximum value.</returns>
        </member>
        <member name="M:WGP.Utilities.Int32ToFOURCC(System.Int32)">
            <summary>
            Converts a 4 bytes number to a string with 4 characters.
            </summary>
            <param name="nb">Number to convert.</param>
            <returns>The FOURCC corresponding to the number.</returns>
        </member>
        <member name="M:WGP.Utilities.FOURCCToInt32(System.String)">
            <summary>
            Converts a 4 characters string to a 4 bytes number.
            </summary>
            <param name="FOURCC">FOURCC to convert.</param>
            <returns>The number corresponding to the FOURCC.</returns>
        </member>
        <member name="M:WGP.Extensions.Interpolation``1(WGP.IFunction,System.Single,``0,``0)">
            <summary>
            Returns an interpolation.
            </summary>
            <param name="fct">Referential function.</param>
            <param name="percent">Percent. Must be between [0,1].</param>
            <param name="min">Minimal value.</param>
            <param name="max">Maximal value.</param>
            <returns>Interpolation.</returns>
        </member>
        <member name="M:WGP.Extensions.Contains(SFML.Graphics.FloatRect,SFML.System.Vector2f)">
            <summary>
            Test if a FloatRect contains a Vector2f.
            </summary>
            <param name="rect">Box.</param>
            <param name="vec">Vector.</param>
            <returns>True if the vector is inside the box, false if not.</returns>
        </member>
        <member name="M:WGP.Extensions.LengthSquared(SFML.System.Vector2f)">
            <summary>
            Returns the length squared of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Length squared.</returns>
        </member>
        <member name="M:WGP.Extensions.Length(SFML.System.Vector2f)">
            <summary>
            Returns the length of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:WGP.Extensions.GetLength(SFML.System.Vector2f)">
            <summary>
            Returns the length of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:WGP.Extensions.SetLength(SFML.System.Vector2f@,System.Single)">
            <summary>
            Returns the length of a vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="length">Length of the vector.</param>
            <returns>Length.</returns>
        </member>
        <member name="M:WGP.Extensions.Normalize(SFML.System.Vector2f)">
            <summary>
            Normalize a vector.
            </summary>
            <param name="vector">Vector to normalize.</param>
            <returns>Normalized vector.</returns>
        </member>
        <member name="M:WGP.Extensions.Angle(SFML.System.Vector2f)">
            <summary>
            Returns the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.GetAngle(SFML.System.Vector2f)">
            <summary>
            Returns the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.SetAngle(SFML.System.Vector2f@,WGP.Angle)">
            <summary>
            Sets the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="angle">Angle of the vector.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.Rotate(SFML.System.Vector2f@,WGP.Angle)">
            <summary>
            Sets the angle of the vector.
            </summary>
            <param name="vector">Vector.</param>
            <param name="angle">Angle of the vector to add.</param>
            <returns>Angle.</returns>
        </member>
        <member name="M:WGP.Extensions.Intersection(WGP.Line,WGP.Line)">
            <summary>
            Returns the intersection between two lines.
            </summary>
            <param name="line1">First line.</param>
            <param name="line2">Second line.</param>
            <returns>Intersection of the lines.</returns>
            <remarks>The returned value is set to default if there is no collision.</remarks>
        </member>
        <member name="M:WGP.Extensions.Collision(WGP.Line,WGP.Line)">
            <summary>
            Test the collision between two lines. Test also the collision if one or both of the lines are segments.
            </summary>
            <param name="line1">First line.</param>
            <param name="line2">econd line.</param>
            <returns>True if there is a collision.</returns>
        </member>
        <member name="M:WGP.Extensions.CrossProduct(SFML.System.Vector2f,SFML.System.Vector2f)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
            <param name="vec1">First vector.</param>
            <param name="vec2">Second vector.</param>
            <returns>Cross product.</returns>
        </member>
        <member name="M:WGP.Extensions.IsInRange``1(``0,``0,``0)">
            <summary>
            Tests if <paramref name="value"/> is in the [<paramref name="min"/> , <paramref name="max"/>] range. <paramref name="min"/> and <paramref name="max"/> are included in the range.
            </summary>
            <typeparam name="T">Type of the variable. Must be comparable.</typeparam>
            <param name="value">Value to compare.</param>
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            <returns>True if <paramref name="value"/> is in the range.</returns>
        </member>
        <member name="M:WGP.Extensions.Capped``1(``0,``0,``0)">
            <summary>
            Cap the value between a maximum and a minimum value.
            </summary>
            <typeparam name="T">Type of the variable. Must be comparable.</typeparam>
            <param name="value">Value to cap.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <returns>Capped value.</returns>
        </member>
    </members>
</doc>
